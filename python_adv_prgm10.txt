
**Question 1: Create a function to return a picture frame as a 2D list.**

```python
def get_frame(width, height, char):
    if width <= 2 or height <= 2:
        return "invalid"
    
    # Create the frame as a list of strings
    frame = []
    
    # Top and bottom row (full of characters)
    frame.append(char * width)
    
    # Middle rows (with spaces in between characters)
    for _ in range(height - 2):
        frame.append(char + " " * (width - 2) + char)
    
    # Bottom row (same as top)
    frame.append(char * width)
    
    return frame

# Test Cases
print(get_frame(4, 5, "#"))
# ? ["####", "# #", "# #", "# #", "####"]

print(get_frame(10, 3, "*"))
# ? ["****", "* *", "****"]

print(get_frame(2, 5, "0"))
# ? "invalid"
```

Explanation: The function checks if the width or height is less than or equal to 2 (invalid condition). Otherwise, it builds the top, middle, and bottom parts of the frame.

---

**Question 2: Write boolean operations (AND, OR, XOR) on a list of boolean values.**

```python
def boolean_and(lst):
    result = lst[0]
    for value in lst[1:]:
        result &= value
    return result

def boolean_or(lst):
    result = lst[0]
    for value in lst[1:]:
        result |= value
    return result

def boolean_xor(lst):
    result = lst[0]
    for value in lst[1:]:
        result ^= value
    return result

# Test Cases
print(boolean_and([True, True, False, True]))  # ? False
print(boolean_or([True, True, False, False]))  # ? True
print(boolean_xor([True, True, False, False]))  # ? False
```

Explanation: The functions apply the respective boolean operation (AND, OR, XOR) on the list of boolean values, evaluating pairwise from left to right.

---

**Question 3: Create a function that generates a box based on dimension `n`.**

```python
def make_box(n):
    if n == 1:
        return ["#"]
    
    box = []
    
    # Top and bottom rows
    box.append("#" * n)
    
    # Middle rows with # at the edges
    for _ in range(n - 2):
        box.append("#" + " " * (n - 2) + "#")
    
    # Bottom row (same as top)
    if n > 1:
        box.append("#" * n)
    
    return box

# Test Cases
print(make_box(5))
# ? ["#####", "# #", "# #", "# #", "#####"]

print(make_box(3))
# ? ["###", "# #", "###"]

print(make_box(2))
# ? ["##", "##"]

print(make_box(1))
# ? ["#"]
```

Explanation: The function generates a box by creating the top, middle, and bottom rows for the box with the given size `n`.

---

**Question 4: Check for duplicate letters in any individual word in a phrase.**

```python
def no_duplicate_letters(phrase):
    words = phrase.split()
    for word in words:
        if len(word) != len(set(word.lower())):  # Convert word to lowercase to ignore case
            return False
    return True

# Test Cases
print(no_duplicate_letters("Fortune favours the bold."))  # ? True
print(no_duplicate_letters("You can lead a horse to water, but you can't make him drink."))  # ? True
print(no_duplicate_letters("Look before you leap."))  # ? False
print(no_duplicate_letters("An apple a day keeps the doctor away."))  # ? False
```

Explanation: The function splits the phrase into words and checks if each word contains duplicate letters by comparing the word's length with the length of the set of its characters (which removes duplicates).

---

**Question 5: Regular expression to match states that voted "yes" to impeachment.**

```python
import re

txt = "Texas = no, California = yes, Florida = yes, Michigan = no"
pattern = r"(?<=\s)(\w+)(?=\s=\syes)"

matches = re.findall(pattern, txt)
print(matches)  # ? ["California", "Florida"]
```

Explanation: The regular expression uses a positive lookahead (`(?<=\s)`) and lookbehind (`(?=\s=\syes)`) to match states that voted "yes." It ensures that the state names are only matched if "yes" follows after them.

