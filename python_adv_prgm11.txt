
**1. Function to return only prime numbers from a list.**

```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def filter_primes(lst):
    return [num for num in lst if is_prime(num)]

# Test Cases
print(filter_primes([7, 9, 3, 9, 10, 11, 27]))  # ? [7, 3, 11]
print(filter_primes([10007, 1009, 1007, 27, 147, 77, 1001, 70]))  # ? [10007, 1009]
print(filter_primes([1009, 10, 10, 10, 3, 33, 9, 4, 1, 61, 63, 69, 1087, 1091, 1093, 1097]))  # ? [1009, 3, 61, 1087, 1091, 1093, 1097]
```

**Explanation:**
- The `is_prime` function checks whether a number is prime by dividing it by all numbers up to the square root of the number.
- `filter_primes` uses list comprehension to filter out non-prime numbers.

---

**2. Function to model the effect of a water balloon popping.**

```python
def pop(lst):
    # Find the index where the balloon is located
    balloon_index = lst.index(next(filter(lambda x: x != 0, lst)))
    result = lst[:]
    
    # The effect of popping the balloon
    for i in range(len(lst)):
        result[i] = abs(i - balloon_index)
    
    return result

# Test Cases
print(pop([0, 0, 0, 0, 4, 0, 0, 0, 0]))  # ? [0, 1, 2, 3, 4, 3, 2, 1, 0]
print(pop([0, 0, 0, 3, 0, 0, 0]))  # ? [0, 1, 2, 3, 2, 1, 0]
print(pop([0, 0, 2, 0, 0]))  # ? [0, 1, 2, 1, 0]
print(pop([0]))  # ? [0]
```

**Explanation:**
- The function finds the index of the non-zero value (the balloon).
- It then creates a new list where each element represents the distance from the balloon, reducing as you move away from it.

---

**3. Function for the "Loves me, loves me not" game.**

```python
def loves_me(petals):
    result = []
    for i in range(petals - 1):
        result.append("Loves me" if i % 2 == 0 else "Loves me not")
    if petals > 0:
        result.append("LOVES ME" if petals % 2 != 0 else "LOVES ME NOT")
    return ", ".join(result)

# Test Cases
print(loves_me(3))  # ? "Loves me, Loves me not, LOVES ME"
print(loves_me(6))  # ? "Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT"
print(loves_me(1))  # ? "LOVES ME"
```

**Explanation:**
- The function alternates between "Loves me" and "Loves me not" for each petal, and the last phrase is in uppercase based on whether the number of petals is odd or even.

---

**4. Function to sort each string in a list alphabetically by the letter.**

```python
def sort_by_letter(lst):
    return sorted(lst, key=lambda x: ''.join(filter(str.isalpha, x)))

# Test Cases
print(sort_by_letter(["932c", "832u32", "2344b"]))  # ? ["2344b", "932c", "832u32"]
print(sort_by_letter(["99a", "78b", "c2345", "11d"]))  # ? ["99a", "78b", "c2345", "11d"]
print(sort_by_letter(["572z", "5y5", "304q2"]))  # ? ["304q2", "5y5", "572z"]
print(sort_by_letter([]))  # ? []
```

**Explanation:**
- The `key` argument in the `sorted` function sorts each string by extracting and sorting its alphabetic characters.

---

**5. Function to determine the position of the ball after several cup swaps.**

```python
def cup_swapping(swaps):
    position = 'B'  # The ball starts under cup B
    for swap in swaps:
        if position in swap:
            position = swap.replace(position, '')  # Swap the ball's position
    return position

# Test Case
print(cup_swapping(["AB", "CA", "AB"]))  # ? "C"
```

**Explanation:**
- The function iterates through each swap, checking if the ball is under one of the swapped cups. If it is, it changes the ball's position accordingly.

