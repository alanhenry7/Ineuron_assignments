
**Question 1: Arithmetic operations on a string number.**

```python
def arithmetic_operation(s):
    num1, operator, num2 = s.split()
    num1, num2 = int(num1), int(num2)
    
    if operator == "+":
        return num1 + num2
    elif operator == "-":
        return num1 - num2
    elif operator == "*":
        return num1 * num2
    elif operator == "//":
        if num2 == 0:
            return -1
        else:
            return num1 // num2

# Test Cases
print(arithmetic_operation("12 + 12"))  # ? 24
print(arithmetic_operation("12 - 12"))  # ? 0
print(arithmetic_operation("12 * 12"))  # ? 144
print(arithmetic_operation("12 // 0"))  # ? -1
```

---

**Question 2: Calculate the perimeter of a triangle given three points.**

```python
import math

def perimeter(points):
    def distance(p1, p2):
        return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)
    
    side1 = distance(points[0], points[1])
    side2 = distance(points[1], points[2])
    side3 = distance(points[2], points[0])
    
    return round(side1 + side2 + side3, 2)

# Test Cases
print(perimeter([[15, 7], [5, 22], [11, 1]]))  # ? 47.08
print(perimeter([[0, 0], [0, 1], [1, 0]]))  # ? 3.42
print(perimeter([[-10, -10], [10, 10], [-10, 10]]))  # ? 68.28
```

---

**Question 3: Find the height of the tallest skyscraper in a 2D list.**

```python
def tallest_skyscraper(skyline):
    max_height = 0
    for col in zip(*skyline):  # Transpose the list to check each column
        height = 0
        for row in col:
            if row == 1:
                height += 1
        max_height = max(max_height, height)
    
    return max_height

# Test Cases
print(tallest_skyscraper([
    [0, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 1, 1, 0],
    [1, 1, 1, 1]
]))  # ? 3

print(tallest_skyscraper([
    [0, 1, 0, 0],
    [0, 1, 0, 0],
    [0, 1, 1, 0],
    [1, 1, 1, 1]
]))  # ? 4

print(tallest_skyscraper([
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1, 1, 1, 0],
    [1, 1, 1, 1]
]))  # ? 2
```

---

**Question 4: Calculate the bonus based on billable days.**

```python
def bonus(days):
    bonus = 0
    
    if days > 32:
        excess_days = days - 32
        if excess_days <= 8:
            bonus += excess_days * 325
        else:
            bonus += 8 * 325
            excess_days -= 8
            if excess_days <= 8:
                bonus += excess_days * 550
            else:
                bonus += 8 * 550
                excess_days -= 8
                bonus += excess_days * 600
    
    return bonus

# Test Cases
print(bonus(15))  # ? 0
print(bonus(37))  # ? 1625
print(bonus(50))  # ? 8200
```

---

**Question 5: Check if a number is a Disarium number.**

```python
def is_disarium(num):
    digits = [int(digit) for digit in str(num)]
    total = sum(digit ** (index + 1) for index, digit in enumerate(digits))
    return total == num

# Test Cases
print(is_disarium(75))  # ? False
print(is_disarium(135))  # ? True
print(is_disarium(544))  # ? False
print(is_disarium(518))  # ? True
print(is_disarium(466))  # ? False
print(is_disarium(8))    # ? True
```

