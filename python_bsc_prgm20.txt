
**Question 1: Create a function that takes a list of strings and integers, and filters out the list so that it returns a list of integers only.**

```python
def filter_list(lst):
    return [x for x in lst if isinstance(x, int)]

# Test Cases
print(filter_list([1, 2, 3, "a", "b", 4]))  # [1, 2, 3, 4]
print(filter_list(["A", 0, "Edabit", 1729, "Python", "1729"]))  # [0, 1729]
print(filter_list(["Nothing", "here"]))  # []
```

---

**Question 2: Given a list of numbers, create a function which returns the list but with each element's index in the list added to itself.**

```python
def add_indexes(lst):
    return [x + i for i, x in enumerate(lst)]

# Test Cases
print(add_indexes([0, 0, 0, 0, 0]))  # [0, 1, 2, 3, 4]
print(add_indexes([1, 2, 3, 4, 5]))  # [1, 3, 5, 7, 9]
print(add_indexes([5, 4, 3, 2, 1]))  # [5, 5, 5, 5, 5]
```

---

**Question 3: Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth.**

Formula for the volume of a cone:  
\[
V = \frac{1}{3} \pi r^2 h
\]
Where \(r\) is the radius and \(h\) is the height.

```python
import math

def cone_volume(height, radius):
    volume = (1/3) * math.pi * radius**2 * height
    return round(volume, 2)

# Test Cases
print(cone_volume(3, 2))  # 12.57
print(cone_volume(15, 6))  # 565.49
print(cone_volume(18, 0))  # 0
```

---

**Question 4: This Triangular Number Sequence is generated from a pattern of dots that form a triangle. Write a function that gives the number of dots with its corresponding triangle number of the sequence.**

The nth triangular number is the sum of the integers from 1 to n:
\[
T_n = \frac{n(n + 1)}{2}
\]

```python
def triangle(n):
    return n * (n + 1) // 2

# Test Cases
print(triangle(1))  # 1
print(triangle(6))  # 21
print(triangle(215))  # 23220
```

---

**Question 5: Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.**

```python
def missing_num(lst):
    return sum(range(1, 11)) - sum(lst)

# Test Cases
print(missing_num([1, 2, 3, 4, 6, 7, 8, 9, 10]))  # 5
print(missing_num([7, 2, 3, 6, 5, 9, 1, 4, 8]))  # 10
print(missing_num([10, 5, 1, 2, 4, 6, 8, 3, 9]))  # 7
```
