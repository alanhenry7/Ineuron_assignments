
**Question 1: Create a function that amplifies numbers in a list based on divisibility by 4.**

```python
def amplify(n):
    return [i * 10 if i % 4 == 0 else i for i in range(1, n + 1)]

# Test Cases
print(amplify(4))  # ? [1, 2, 3, 40]
print(amplify(3))  # ? [1, 2, 3]
print(amplify(25))  # ? [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25]
```

---

**Question 2: Create a function that returns the unique number from a list.**

```python
def unique(lst):
    for num in lst:
        if lst.count(num) == 1:
            return num

# Test Cases
print(unique([3, 3, 3, 7, 3, 3]))  # ? 7
print(unique([0, 0, 0.77, 0, 0]))  # ? 0.77
print(unique([0, 1, 1, 1, 1, 1, 1, 1]))  # ? 0
```

---

**Question 3: Create a Circle class with methods to calculate area and perimeter.**

```python
import math

class Circle:
    def __init__(self, radius):
        self.radius = radius
        
    def getArea(self):
        return round(math.pi * (self.radius ** 2), 2)
    
    def getPerimeter(self):
        return round(2 * math.pi * self.radius, 2)

# Test Cases
circy = Circle(11)
print(circy.getArea())  # ? 380.13
circy2 = Circle(4.44)
print(circy2.getPerimeter())  # ? 27.90
```

---

**Question 4: Create a function that sorts a list of strings by length.**

```python
def sort_by_length(lst):
    return sorted(lst, key=len)

# Test Cases
print(sort_by_length(["Google", "Apple", "Microsoft"]))  # ? ["Apple", "Google", "Microsoft"]
print(sort_by_length(["Leonardo", "Michelangelo", "Raphael", "Donatello"]))  # ? ["Raphael", "Leonardo", "Donatello", "Michelangelo"]
print(sort_by_length(["Turing", "Einstein", "Jung"]))  # ? ["Jung", "Turing", "Einstein"]
```

---

**Question 5: Create a function that validates a Pythagorean triplet.**

```python
def is_triplet(a, b, c):
    a, b, c = sorted([a, b, c])  # Sort the numbers so the largest is last
    return a**2 + b**2 == c**2

# Test Cases
print(is_triplet(3, 4, 5))  # ? True
print(is_triplet(13, 5, 12))  # ? True
print(is_triplet(1, 2, 3))  # ? False
```
